//////////////////////////////////////////////////////////
//// FIT 1047 Oct 2024, Assignment 2, Part 1d
////
////  Student name: Mohamed Kaysar
//// Student email: kmoh0027@student.monash.edu
////    Student ID: 35476435
//////////////////////////////////////////////////////////

/ Main program: call the SubDigitTimer subroutine and then halt
//JnS	SubDigitTimer
//Halt

// Subroutine to make all the pixels to white 
JnS SubResetDisplay // jump to subroutine and store HEX 0000 as the address to return back here 
// next instruction below 

Load DigitPixelsAddr // Load the first pixels 
Add number // Add 135 to with the pixels to go to the last 15 pixels and display the digit "9"
Store DigitDataAddress // storing it as the starting address
Load Display11 // 0F11 
Store DigitDisplayAddress // storing this as the location to start to drawing 
// then call this Subroutine to draw the digit
JnS SubDrawDigit 

// Subroutine to draw the rest of the digits (doesnt work properly)
JnS SubDigitTimer

Halt

number, DEC 135

//////////////////////////////////////////////////////////
//// Task 1: Reset the display
//////////////////////////////////////////////////////////

/ TO DO: Add your subroutine for clearing the screen here

// Load Address // Load starting address 
// Store Pointer // A temporary variable to store the address
// BRUH U DONT EVEN NEED THESE ABOVE IDK WHY I PUT IT IN THE ASSIGNMENT.

SubResetDisplay, HEX 000 // we come here and store this 
		 		 Load Address // loading starting address look at the display tab 0xF00
				 Store Pointer // temporary varaiable to store the address (0F00)

// Loading the white color and incrementing to each pixels to make it white 
Loop, Load White  // using the white colour
	  StoreI Pointer // 0F00 is the address. so we are gonna store the white colour at this address
      Load Pointer // 0F00 
	  Add One // 0F00 + 1 = 0F01
      Store Pointer // store the new pixel value, 0F01
      Load Pointer  // 0F01 - 3841
      Subt EndAddress // 0FFF - 3841 - 4095 = -254
      Skipcond 800 // if AC > 0 
      Jump Loop 
      JumpI SubResetDisplay // then we go back to HEX 000 which is basically JnS SubResetDisplay


				 
White, HEX FFFF   // white colour pixel               
Address, HEX 0F00 // starting address to display
EndAddress, HEX 0FFF // the last address to display/ end the code
Pointer, HEX 0000 // temporary variable, our first address we stored is 0F00
One, DEC 1

//////////////////////////////////////////////////////////
//// Task 2: Painting a number
//////////////////////////////////////////////////////////



Display11, HEX 0F11 // this is basically in the next line of the pixel we can start drawing there
DigitDataAddress, HEX 0 // a variable to stoore starting address in the pixel data 
DigitDisplayAddress, HEX 0 // a variable to store the location in the memory to draw 
SubDrawDigit, HEX 0

// 3x5 pixel data, so 5 rows and 3 columns we will have
			  
// Loops through each digit of the row. OUTERLOOP IS FOR ROWS          
OuterLoop,	Load OuterCount // 5
			Skipcond 400 //  if AC = 0
            Jump Cont1 
            Jump OuterDone

// updating the display address to the next row and reset the inner loop
Cont1,	JnS InnerLoopStart // jump and store HEX 0000
			Load DigitDisplayAddress
			Add Thirteen // adding thirteen to go to the next row and store the next location to draw
            Store DigitDisplayAddress

            Load OuterCount // then we can decrement the row since this row is done
            Subt One
            Store OuterCount
            
            Load Three 
            Store InnerCount // since we have 3 pixels per row we need to update this for each column.
            Jump OuterLoop

OuterDone,	JumpI SubDrawDigit
Thirteen, DEC 13
OuterCount,	HEX 5 // rows left to draw. this is same as DEC 5	

// Subroutine
InnerLoopStart,	HEX 0

// loops through each column of the current row. INNERLOOP IS FOR COLUMNS
InnerLoop,	Load InnerCount // HEX 3
			Skipcond 400 // if AC = 0
            Jump Cont2
            Jump InnerDone // after this we can jump to innerdone to go back to the subroutine again

// Updating the address to the next pixel
Cont2,	LoadI DigitDataAddress // Load starting pixel from the digitdataaddress
            StoreI DigitDisplayAddress // store it in DigitDisplayAddress to start drawing at that location 
            
            Load DigitDataAddress // increment to the next pixel in the digit data
            Add One
            Store DigitDataAddress
			
			Load DigitDisplayAddress // increment to the next location of where to draw
			Add One
            Store DigitDisplayAddress

			Load InnerCount // then we can decrease the counter since the first column is done
			Subt One
            Store InnerCount
            Jump InnerLoop // loop again

InnerDone,	JumpI InnerLoopStart
Three, DEC 3
InnerCount,	HEX 3 // columns left to draw. this is same as DEC 3


//////////////////////////////////////////////////////////
//// Task 3: Create a countdown timer
//////////////////////////////////////////////////////////

/ TO DO: Add your subroutine for the countdown, and any
/        additional subroutines you implement, below.

offset, DEC 15
SubDigitTimer, HEX 0

timerloop, Load DigitPixelsAddr
           Add offset
           Store DigitDataAddress
           Load Display11
           Store DigitDisplayAddress
           
           JnS SubDrawDigit
           Skipcond 000
           Jump timerloop
           JumpI SubDigitTimer
           

//////////////////////////////////////////////////////////
//// Data: You don't need to change or add anything below
//////////////////////////////////////////////////////////

/ Address of the digit data
DigitPixelsAddr, Adr DigitPixels

/ The digit data:
/ Each character is 3 pixels wide and 5 pixels high.
/ It is represented as 15 consecutive words of memory,
/ in "row-major order". That means that the first three
/ words represent the top-most row of pixels, the next
/ three words the second row, and so on.

DigitPixels, HEX FFFF       / Start of character 0
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX 0
      HEX FFFF
      HEX 0
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX FFFF       / Start of character 1
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX 0          / Start of character 2
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX 0
      HEX 0
      HEX 0          / Start of character 3
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX 0
      HEX 0
      HEX FFFF
      HEX 0          / Start of character 4
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX 0
      HEX 0
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX 0          / Start of character 5
      HEX 0
      HEX 0
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX 0
      HEX 0
      HEX FFFF
      HEX FFFF       / Start of character 6
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0          / Start of character 7
      HEX 0
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX FFFF       / Start of character 8
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX FFFF       / Start of character 9
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX 0
      HEX FFFF
      HEX FFFF
      HEX 0
      HEX FFFF
      HEX 0
      HEX FFFF